# local database config
spring.datasource.url=${JDBC_URL:jdbc:h2:file:./data/db}
spring.datasource.driverClassName=${JDBC_DRIVER:org.h2.Driver}
spring.datasource.username=${JDBC_USER:sa}
spring.datasource.password=${JDBC_PASS:password}
spring.jpa.database-platform=${JDBC_DIALECT:org.hibernate.dialect.H2Dialect}
spring.jpa.hibernate.ddl-auto=update

#scopes
scopes.enabled=${SCOPES_ENABLED:true}
scopes.default=${SCOPES_DEFAULT:default}
scopes.list=${SCOPES_LIST:}
scopes.roles.mapping.admin=${SCOPES_ROLES_ADMIN:ROLE_ADMIN}
scopes.roles.mapping.resourceAdmin=${SCOPES_ROLES_RESOURCE_ADMIN:ROLE_RESOURCE_ADMIN}
scopes.roles.mapping.consumerAdmin=${SCOPES_ROLES_CONSUMER_ADMIN:ROLE_CONSUMER_ADMIN}
scopes.roles.mapping.user=${SCOPES_ROLES_USER:ROLE_USER}

#permissions
permissions.enabled=${PERMISSIONS_ENABLED:true}

#auth
auth.enabled=${AUTH_ENABLED:true}

#encrypt
encrypt.enabled=${ENCRYPT:false}
encrypt.key=${ENCRYPT_KEY:}

#static config
consumers.static.sql=logSqlConsumer
consumers.static.nosql=
consumers.static.file=
consumers.static.object=
consumers.static.odbc=

#openid
rest.security.issuer-uri=${OAUTH_ISSUER_URI:}
security.oauth2.client.scopes=${OAUTH_SCOPES:profile, email, user.roles.me}
security.oauth2.client.client-id=${OAUTH_CLIENT_ID:}
security.oauth2.client.client-secret=${OAUTH_CLIENT_SECRET:}
security.oauth2.client.access-token-uri=${OAUTH_TOKEN_URI:}
security.oauth2.client.user-authorization-uri=${OAUTH_AUTH_URI:}
security.oauth2.resource.id=${OAUTH_CLIENT_ID:}
## if token are NOT JWT tokeninfo is required
security.oauth2.resource.token-info-uri=${OAUTH_TOKEN_INTROSPECT_URI:}
security.oauth2.resource.user-info-uri=${OAUTH_USERINFO_URI:}
## if JWKS provided spring expects token as JWT
security.oauth2.resource.jwk.key-set-uri=${OAUTH_JWKS_URI:}

# public url
application.url=${APPLICATION_URL:}

#log
log.level=${LOG_LEVEL:DEBUG}
log.console=${LOG_CONSOLE:false}

# providers
providers.null.enable=false
providers.null.properties=

providers.postgressql.enable=${PROVIDER_POSTGRES:false}
providers.postgressql.checkOnStart=${PROVIDER_POSTGRES_STARTUP_CHECK:true}
providers.postgressql.host=${PROVIDER_POSTGRES_HOST:}
providers.postgressql.port=${PROVIDER_POSTGRES_PORT:5432}
providers.postgressql.ssl=${PROVIDER_POSTGRES_SSL:false}
providers.postgressql.username=${PROVIDER_POSTGRES_USER:}
providers.postgressql.password=${PROVIDER_POSTGRES_PASS:}
providers.postgressql.properties=

providers.mysql.enable=${PROVIDER_MYSQL:false}
providers.mysql.checkOnStart=${PROVIDER_MYSQL_STARTUP_CHECK:true}
providers.mysql.host=${PROVIDER_MYSQL_HOST:}
providers.mysql.port=${PROVIDER_MYSQL_PORT:3306}
providers.mysql.ssl=${PROVIDER_MYSQL_SSL:false}
providers.mysql.username=${PROVIDER_MYSQL_USER:}
providers.mysql.password=${PROVIDER_MYSQL_PASS:}
providers.mysql.properties=

providers.tidb.enable=${PROVIDER_TIDB:false}
providers.tidb.checkOnStart=${PROVIDER_TIDB_STARTUP_CHECK:true}
providers.tidb.host=${PROVIDER_TIDB_HOST:}
providers.tidb.port=${PROVIDER_TIDB_PORT:3306}
providers.tidb.ssl=${PROVIDER_TIDB_SSL:false}
providers.tidb.username=${PROVIDER_TIDB_USER:}
providers.tidb.password=${PROVIDER_TIDB_PASS:}
providers.tidb.properties=

providers.cockroachdb.enable=${PROVIDER_COCKROACH:false}
providers.cockroachdb.checkOnStart=${PROVIDER_COCKROACH_STARTUP_CHECK:true}
providers.cockroachdb.host=${PROVIDER_COCKROACH_HOST:}
providers.cockroachdb.port=${PROVIDER_COCKROACH_PORT:5432}
providers.cockroachdb.ssl=${PROVIDER_COCKROACH_SSL:false}
providers.cockroachdb.insecure=${PROVIDER_COCKROACH_INSECURE:true}
providers.cockroachdb.username=${PROVIDER_COCKROACH_USER:}
providers.cockroachdb.password=${PROVIDER_COCKROACH_PASS:}
providers.cockroachdb.properties=

providers.yugabytedb.enable=${PROVIDER_YUGABYTE:false}
providers.yugabytedb.checkOnStart=${PROVIDER_YUGABYTE_STARTUP_CHECK:true}
providers.yugabytedb.host=${PROVIDER_YUGABYTE_HOST:}
providers.yugabytedb.port=${PROVIDER_YUGABYTE_PORT:5432}
providers.yugabytedb.ssl=${PROVIDER_YUGABYTE_SSL:false}
providers.yugabytedb.username=${PROVIDER_YUGABYTE_USER:}
providers.yugabytedb.password=${PROVIDER_YUGABYTE_PASS:}
providers.yugabytedb.properties=

providers.minio.enable=${PROVIDER_MINIO:false}
providers.minio.checkOnStart=${PROVIDER_MINIO_STARTUP_CHECK:true}
providers.minio.host=${PROVIDER_MINIO_HOST:}
providers.minio.port=${PROVIDER_MINIO_PORT:9000}
providers.minio.ssl=${PROVIDER_MINIO_SSL:false}
providers.minio.accessKey=${PROVIDER_MINIO_ACCESS_KEY:}
providers.minio.secretKey=${PROVIDER_MINIO_SECRET_KEY:}
providers.minio.userAccessKey=${PROVIDER_MINIO_USER_ACCESS_KEY:}
providers.minio.userSecretKey=${PROVIDER_MINIO_USER_SECRET_KEY:}
providers.minio.clearOnDelete=true
providers.minio.useScopePolicy=false
providers.minio.properties=

providers.mongodb.enable=${PROVIDER_MONGODB:false}
providers.mongodb.checkOnStart=${PROVIDER_MONGODB_STARTUP_CHECK:true}
providers.mongodb.host=${PROVIDER_MONGODB_HOST:}
providers.mongodb.port=${PROVIDER_MONGODB_PORT:3306}
providers.mongodb.ssl=${PROVIDER_MONGODB_SSL:false}
providers.mongodb.username=${PROVIDER_MONGODB_USER:}
providers.mongodb.password=${PROVIDER_MONGODB_PASS:}
providers.mongodb.properties=

providers.dremio.enable=${PROVIDER_DREMIO:false}
providers.dremio.checkOnStart=${PROVIDER_DREMIO_STARTUP_CHECK:true}
providers.dremio.host=${PROVIDER_DREMIO_HOST:}
providers.dremio.port=${PROVIDER_DREMIO_PORT:9047}
providers.dremio.ssl=${PROVIDER_DREMIO_SSL:false}
providers.dremio.username=${PROVIDER_DREMIO_USER:}
providers.dremio.password=${PROVIDER_DREMIO_PASS:}
providers.dremio.odbc.username=${PROVIDER_DREMIO_ODBC_USER:}
providers.dremio.odbc.password=${PROVIDER_DREMIO_ODBC_PASS:}
providers.dremio.interval=${PROVIDER_DREMIO_INTERVAL:60000}
providers.dremio.sync=${PROVIDER_DREMIO_SYNC:false}
providers.dremio.properties=

# consumers
consumers.log.enable=true
consumers.null.enable=false
consumers.null.properties=

consumers.sqlpad.enable=${CONSUMER_SQLPAD:true}
consumers.sqlpad.properties=endpoint,username,password

consumers.dremio.enable=${CONSUMER_DREMIO:true}
consumers.dremio.properties=endpoint,username,password

consumers.metabase.enable=${CONSUMER_METABASE:true}
consumers.metabase.properties=endpoint,username,password

consumers.webhook.enable=${CONSUMER_WEBHOOK:true}
consumers.webhook.properties=endpoint,username,password,token,secret
consumers.webhook.credentials=false

consumers.dss.enable=${CONSUMER_DSS:true}
consumers.dss.properties=endpoint,username,password,tenant




